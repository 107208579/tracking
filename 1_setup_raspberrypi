==========================================================================================
==== Installing Raspberry Pi OS ==========================================================
==========================================================================================

    → Get the 'Raspberry Pi Imager' to write the image to an SD card
    ~ https://www.raspberrypi.org/downloads/


    → For SSH connectivity add the following file to the root of the SD card
         touch /Volumes/boot/ssh


    → For WiFi connectivity add the following file to the root of the SD card
         vi /Volumes/boot/wpa_supplicant.conf
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
country=CA

network={
ssid="<your_network_name>"
scan_ssid=1
psk="<your_password>"
}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 


    → The WiFi configuration can later be edited again with the following command
         sudo vi /etc/wpa_supplicant/wpa_supplicant.conf


    → Eject the SD Card
         hdiutil eject /Volumes/boot/


    → Transfer the SD Card to your Raspberry Pi and boot it up





==========================================================================================
==== Logging on to the Raspberry Pi ======================================================
==========================================================================================

    → Locate your Raspberry Pi network address
         arp -a | grep -ia b8:27:eb


    → Connect to your Raspberry Pi via 'ssh' via default logins
         ssh pi@xxx.xxx.xxx.xxx
         • username: pi
         • password: raspberry





==========================================================================================
==== Change Passwords ====================================================================
==========================================================================================

    → Change the default password for user 'pi'
         passwd


    → Change the default password for user 'root'
         sudo passwd root





==========================================================================================
==== Configure System ====================================================================
==========================================================================================

    → Set the GPU memory to 16 MB if you don't use a display
         sudo vi /boot/config.txt
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
# Set GPU Memory
gpu_mem=16
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 


    → Disable Bluetooth to avoid interference with Zigbee
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
# Disable Bluetooth 
dtoverlay=disable-bt
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 


    → Disable HDMI circuits if you don't use a display
         sudo vi /etc/rc.local
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
# Disable HDMI
/usr/bin/tvservice -o
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 


    → Disable Wifi if you connect over Ethernet
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
# Disable Wifi
dtoverlay=disable-wifi
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 





==========================================================================================
==== Setting up the .bashrc ==============================================================
==========================================================================================

   → Edit your users '.bashrc'
          vi ~/.bashrc

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
# .bashrc

# INTERACTIVE IDLE
case $- in
    *i*) ;;
      *) return;;
esac

# GLOBAL DEFINITIONS
if [ -f /etc/bashrc ]; then
        . /etc/bashrc
fi

# MISC
[ -z "$PS1" ] && return
[ -x /usr/bin/lesspipe ] && eval "$(lesspipe)"
shopt -s checkwinsize
shopt -s sourcepath
shopt -s histappend
shopt -o noclobber

# EXPORT
export HISTCONTROL=$HISTCONTROL${HISTCONTROL+,}ignoredups
export HISTTIMEFORMAT="%Y/%m/%d %H:%M:%S "
export HISTCONTROL=ignoreboth
export HISTCONTROL=ignorespace
export HISTSIZE=10000000
export HISTFILESIZE=1000000000
export EDITOR="vi"

# COLORS
# Reset
Color_Off="\[\033[0m\]"       # Text Reset

# Regular Colors
Black="\[\033[0;30m\]"        # Black
Red="\[\033[0;31m\]"          # Red
Green="\[\033[0;32m\]"        # Green
Yellow="\[\033[0;33m\]"       # Yellow
Blue="\[\033[0;34m\]"         # Blue
Purple="\[\033[0;35m\]"       # Purple
Cyan="\[\033[0;36m\]"         # Cyan
White="\[\033[0;37m\]"        # White

# Bold
BBlack="\[\033[1;30m\]"       # Black
BRed="\[\033[1;31m\]"         # Red
BGreen="\[\033[1;32m\]"       # Green
BYellow="\[\033[1;33m\]"      # Yellow
BBlue="\[\033[1;34m\]"        # Blue
BPurple="\[\033[1;35m\]"      # Purple
BCyan="\[\033[1;36m\]"        # Cyan
BWhite="\[\033[1;37m\]"       # White

# Underline
UBlack="\[\033[4;30m\]"       # Black
URed="\[\033[4;31m\]"         # Red
UGreen="\[\033[4;32m\]"       # Green
UYellow="\[\033[4;33m\]"      # Yellow
UBlue="\[\033[4;34m\]"        # Blue
UPurple="\[\033[4;35m\]"      # Purple
UCyan="\[\033[4;36m\]"        # Cyan
UWhite="\[\033[4;37m\]"       # White

# Background
On_Black="\[\033[40m\]"       # Black
On_Red="\[\033[41m\]"         # Red
On_Green="\[\033[42m\]"       # Green
On_Yellow="\[\033[43m\]"      # Yellow
On_Blue="\[\033[44m\]"        # Blue
On_Purple="\[\033[45m\]"      # Purple
On_Cyan="\[\033[46m\]"        # Cyan
On_White="\[\033[47m\]"       # White

# High Intensty
IBlack="\[\033[0;90m\]"       # Black
IRed="\[\033[0;91m\]"         # Red
IGreen="\[\033[0;92m\]"       # Green
IYellow="\[\033[0;93m\]"      # Yellow
IBlue="\[\033[0;94m\]"        # Blue
IPurple="\[\033[0;95m\]"      # Purple
ICyan="\[\033[0;96m\]"        # Cyan
IWhite="\[\033[0;97m\]"       # White

# Bold High Intensty
BIBlack="\[\033[1;90m\]"      # Black
BIRed="\[\033[1;91m\]"        # Red
BIGreen="\[\033[1;92m\]"      # Green
BIYellow="\[\033[1;93m\]"     # Yellow
BIBlue="\[\033[1;94m\]"       # Blue
BIPurple="\[\033[1;95m\]"     # Purple
BICyan="\[\033[1;96m\]"       # Cyan
BIWhite="\[\033[1;97m\]"      # White

# High Intensty backgrounds
On_IBlack="\[\033[0;100m\]"   # Black
On_IRed="\[\033[0;101m\]"     # Red
On_IGreen="\[\033[0;102m\]"   # Green
On_IYellow="\[\033[0;103m\]"  # Yellow
On_IBlue="\[\033[0;104m\]"    # Blue
On_IPurple="\[\033[10;95m\]"  # Purple
On_ICyan="\[\033[0;106m\]"    # Cyan
On_IWhite="\[\033[0;107m\]"   # White

# HOST
HOST="zigbee";

# PROMPT
PS1="$Black[$Red\u$Black@$Red$HOST $Red\W$Black]$Black "
#unset BLACK; unset BLUE; unset BROWN; unset CYAN; unset GREEN; unset GREY; unset MAGENTA; unset RED; unset WHITE; unset YELLOW; unset BOLD
export PS1

# ALIAS
alias df="df -h"
alias ls="ls -hlG"
alias lss="du -ksh * | sort -nr"
alias lsb="du -ksh * | sort -n"
alias rebash=". ~/.bashrc"
alias re='cd $OLDPWD'

# FUNCTIONS
function .ip() {
    echo -e "Ethernet:\t `ip addr show eth0 | grep "inet\b" | awk '{print $2}' | cut -d/ -f1`"
    echo -e "WiFi:\t\t `ip addr show wlan0 | grep "inet\b" | awk '{print $2}' | cut -d/ -f1`"
    echo -e "External:\t `curl -s http://checkip.dyndns.org/ | grep -o '[0-9][0-9]*.[0-9][0-9]*.[0-9][0-9]*.[0-9]*'`"
}
extract () {
        if [ -f $1 ] ; then
                case $1 in
                        *.tar.bz2)      tar xjf $1              ;;
                        *.tar.gz)       tar xzf $1              ;;
                        *.bz2)          bunzip2 $1              ;;
                        *.rar)          rar x $1                ;;
                        *.gz)           gunzip $1               ;;
                        *.tar)          tar xf $1               ;;
                        *.tbz2)         tar xjf $1              ;;
                        *.tgz)          tar xzf $1              ;;
                        *.zip)          unzip $1                ;;
                        *.Z)            uncompress $1   ;;
                        *)                      echo "'$1' cannot be extracted via extract()" ;;
                esac
        else
                echo "'$1' is not a valid file"
        fi
}

function .temp() {
cpuTemp0=$(cat /sys/class/thermal/thermal_zone0/temp)
cpuTemp1=$(($cpuTemp0/1000))
cpuTemp2=$(($cpuTemp0/100))
cpuTempM=$(($cpuTemp2 % $cpuTemp1))

gpuTemp0=$(/opt/vc/bin/vcgencmd measure_temp)
gpuTemp0=${gpuTemp0//\'/º}
gpuTemp0=${gpuTemp0//temp=/}

echo CPU: $cpuTemp1"."$cpuTempM"ºC"
echo GPU: $gpuTemp0
}

function .arch() {
  local arch
  local IFS=' '
  read -r _ arch _ <<< $(file --dereference --brief "$(which ls)")
  echo -n "${arch}"
}


# HARDWARE
hardware_model=`cat /proc/cpuinfo | grep 'Model' | awk '{$1=$2=""; print $0}'`
hardware_revision=`cat /proc/cpuinfo | grep 'Revision' | awk '{print $3}'`
hardware_serial=`cat /proc/cpuinfo | grep 'Serial' | awk '{print $3}'`
cpu_model=`cat /proc/cpuinfo | grep 'Hardware' | awk '{print $3}'`
cpu_architecture=`uname -m`
#cpu_frequency=`cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq`
cpu_frequency=`lscpu | grep 'CPU max MHz' | awk {'print $4'}`
memory_total=`cat /proc/meminfo | grep MemTotal | awk {'print $2/1024'}`
core_temp=`/opt/vc/bin/vcgencmd measure_temp | cut -c "6-9"`
core_volt=`/opt/vc/bin/vcgencmd measure_volts core | cut -c "6-9"`
interface_address_lo=`cat /sys/class/net/lo/address 2>/dev/null`
interface_address_eth0=`cat /sys/class/net/eth0/address 2>/dev/null`
interface_address_wlan0=`cat /sys/class/net/wlan0/address 2>/dev/null`
interface_address_docker0=`cat /sys/class/net/docker0/address 2>/dev/null`

# SOFTWARE
system_os=`lsb_release -d | awk -F\: '{printf $2}'`
system_kernel=`uname -r`
system_host=`hostname | awk -F\- '{print $1}'`
system_uptime=`uptime | grep -ohe 'up .*' | sed 's/,/\ hours/g' | awk '{ printf $2" "$3 }'`

# NETWORK
ipv4_address_eth0=`ifconfig eth0 2>/dev/null | grep 'netmask' | awk '{print $2}'`
ipv4_netmask_eth0=`ifconfig eth0 2>/dev/null | grep 'netmask' | awk '{print $4}'`
ipv4_broadcast_eth0=`ifconfig eth0 2>/dev/null | grep 'netmask' | awk '{print $6}'`
ipv4_address_wlan0=`ifconfig wlan0 2>/dev/null | grep 'netmask' | awk '{print $2}'`
ipv4_netmask_wlan0=`ifconfig wlan0 2>/dev/null | grep 'netmask' | awk '{print $4}'`
ipv4_broadcast_wlan0=`ifconfig wlan0 2>/dev/null | grep 'netmask' | awk '{print $6}'`
ipv6_address_eth0=`ifconfig eth0 2>/dev/null | grep 'inet6' | awk '{print $2}'`
ipv6_address_wlan0=`ifconfig wlan0 2>/dev/null | grep 'inet6' | awk '{print $2}'`

# MOTD
clear
echo "---- [Hardware] ---------------------------------------"
echo "Model Name:            " $hardware_model
echo "Revision Number:       " $hardware_revision
echo "Serial Number:         " $hardware_serial
echo ""
echo "CPU Model:             " $cpu_model
echo "CPU Architecture:      " $cpu_architecture
echo "CPU Speed:             " $cpu_frequency "Hz"
echo "System Memory:         " $memory_total "MB"
echo "Core Temperature:      " $core_temp "ºC"
echo "Core Voltage:          " $core_volt "Volts"
echo ""
echo "lo Address:            " $interface_address_lo
echo "eth0 Address:          " $interface_address_eth0
echo "wlan0 Address:         " $interface_address_wlan0
echo "docker0 Address:       " $interface_address_docker0
echo ""
echo "---- [Software] ---------------------------------------"
echo "Operating System:      " $system_os
echo "Kernel:                " $system_kernel
echo "Hostname:              " $system_host
echo "Uptime:                " $system_uptime
echo ""
echo "---- [Network] ----------------------------------------"
echo "IPv4 eth0 Address:     " $ipv4_address_eth0
echo "IPv4 eth0 Netmask:     " $ipv4_netmask_eth0
echo "IPv4 eth0 Broadcast:   " $ipv4_broadcast_eth0
echo "IPv6 eth0 Address:     " $ipv6_address_eth0
echo ""
echo "IPv4 wlan0 Address:    " $ipv4_address_wlan0
echo "IPv4 wlan0 Netmask:    " $ipv4_netmask_wlan0
echo "IPv4 wlan0 Broadcast:  " $ipv4_broadcast_wlan0
echo "IPv6 wlan0 Address:    " $ipv6_address_wlan0
echo "-------------------------------------------------------"

    → Activate the new .bashrc
         source .bashrc





==========================================================================================
==== Configuring Locale ==================================================================
==========================================================================================

    → Set your time-zone
         sudo timedatectl set-timezone UTC
         sudo timedatectl set-timezone Asia/Singapore


    → Set your keyboard layout
         sudo vi /etc/default/keyboard
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
XKBMODEL="pc105"
XKBLAYOUT="us"
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 


    → Remove locale user setting in case you receive error messages when running commands
         sudo vi /etc/ssh/sshd_config
         • # AcceptEnv LANG LC_*


    → Update the locale file and add/remove # 
         sudo vi /etc/locale.gen
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
# en_GB.UTF-8 UTF-8
en_US.UTF-8 UTF-8
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 


    → Re-configure your locale configuration
         sudo dpkg-reconfigure locales


    → Alternatively et the locale manually
         sudo vi /etc/default/locale
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
LANG="en_US.UTF-8"
LC_ALL="en_US.UTF-8"
LANGUAGE="en_US.UTF-8"
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 


    → Check your locale settings
         locale


    → Better reboot after locale change
         sudo reboot





==========================================================================================
==== Updating Raspberry Pi OS ============================================================
==========================================================================================

    → Check your operating system
           uname -a


    → Update your system's package list
           sudo apt-get update


    → Upgrade installed packages to their latest version
           sudo apt-get dist-upgrade


    → Remove downloaded .deb packages from /var/cache/apt/archives/
           sudo apt-get clean
           sudo apt-get --purge -y autoremove





==========================================================================================
==== Securing Raspberry Pi OS ============================================================
==========================================================================================

    → Update your ssh daemon configuration file
           sudo vi /etc/ssh/sshd_config

           • LoginGraceTime 120
           • PermitRootLogin no
           • PermitEmptyPasswords no


    → Restart the service so that changes take effect
           sudo service ssh restart





==========================================================================================
==== Setting up SSH Keys =================================================================
==========================================================================================

   → Read the introduction for understanding SSH keys and their function
   ~ http://blakesmith.me/2010/02/08/understanding-public-key-private-key-concepts.html
   ~ https://www.digitalocean.com/community/tutorials/how-to-set-up-ssh-keys--2

   → Think of your public key as a lock that can be put on any server (~/.ssh/authorized_keys)
   → Think of your private key as the key to unlock that lock
   → You also can put a password onto your private key (before they key can be used to open a lock)

   → Start with your LOCAL computer first
   → Check if any SSH keys already exist
           ls -l ~/.ssh

   → Generate public and private SSH keys on your local computer
   ~ https://escapologybb.com/generate-ssh-keys/
           ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa

   → Check if your local key was produced correctly
           less ~/.ssh/id_rsa.pub

   → List the SSH key fingerprint
           ssh-keygen -l

   → NEVER share your private key!


   → Switch to your REMOTE computer and create the following
           mkdir ~/.ssh
           touch ~/.ssh/authorized_keys
           chmod 700 ~/.ssh/
           chmod 600 ~/.ssh/authorized_keys

   → Copy your public SSH key from your LOCAL computer
           less ~/.ssh/id_rsa.pub

   → And paste it to your REMOTE computer
           vi ~/.ssh/authorized_keys

   → Restart the SSH service
           sudo /etc/init.d/ssh restart


   → Password authentication can be completely removed if NECESSARY
           sudo vi /etc/ssh/sshd_config
           • PasswordAuthentication no
           • ChallengeResponseAuthentication no
           • UsePAM no





==========================================================================================
==== Deactivating unnecessary services ===================================================
==========================================================================================

   → Check what active services are running
           systemctl --type=service --state=active

   → Check the status of a specific service
           sudo service fail2ban status

   → Here are some services that probably can be disabled
           systemctl disable bluetooth
           systemctl disable avahi-daemon
           systemctl disable triggerhappy

   → Check which services delay boot-up time of your device
           systemd-analyze
           systemd-analyze blame
           systemd-analyze critical-chain

   → Show a tree of all processes
           pstree





==========================================================================================
==== Rebooting Raspberry Pi OS ===========================================================
==========================================================================================

   → Update the crontab if you want to reboot your server weekly
           crontab -e
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
# .---------------- minute       (0 - 59)
# |  .------------- hour         (0 - 23)
# |  |  .---------- day of month (1 - 31)
# |  |  |  .------- month        (1 - 12) OR (jan,feb,mar,apr..)
# |  |  |  |  .---- day of week  (0 - 6) (Sunday=0 or 7) OR (sun,mon,tue,wed,thu,fri,sat)
# |  |  |  |  |
# *  *  *  *  *  command to be executed

# Reboot Every Sunday 04:00
0 4 * * 0 /sbin/shutdown -r now
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 





==========================================================================================
==== Checking log files ==================================================================
==========================================================================================

    → Always check the start-up logfile for any potential errors
         dmesg

    → Check the boot.log
         less /var/log/boot.log

    → Check the kernel and driver-related information
         sudo less /var/log/messages

         • /var/log/messages    Contains all kernel- and driver-related information. 
         • /var/log/auth.log    Contains system authorization information.
         • /var/log/boot.log    Contains information that is logged when the system boots up.
         • /var/log/daemon.log  Contains information logged by the various background daemons.
         • /var/log/dpkg.log    Contains information that is logged when a package is either installed or removed using dpkg.
         • /var/log/maillog     Contains the mail server log information.
         • /var/log/mail.log    Contains the mail server log information.
         • /var/log/cups        Contains all printer and printing related log messages on the Raspberry Pi.
